# ----------------------------------------------------------------------------#
# -------------------------------- Bro Types ---------------------------------#
# ----------------------------------------------------------------------------#
# BRO TYPE		INT
# -------------------------
# BRO_TYPE_UNKNOWN	0
# BRO_TYPE_BOOL		1
# BRO_TYPE_INT		2
# BRO_TYPE_COUNT	3
# BRO_TYPE_COUNTER	4
# BRO_TYPE_DOUBLE	5
# BRO_TYPE_TIME		6
# BRO_TYPE_INTERVAL	7
# BRO_TYPE_STRING	8
# BRO_TYPE_PATTERN	9
# BRO_TYPE_ENUM		10
# BRO_TYPE_TIMER	11
# BRO_TYPE_PORT   	12
# BRO_TYPE_IPADDR	13
# BRO_TYPE_SUBNET   14
# BRO_TYPE_ANY   	15
# BRO_TYPE_TABLE   	16
# BRO_TYPE_UNION   	17
# BRO_TYPE_RECORD   18
# BRO_TYPE_LIST   	19
# BRO_TYPE_FUNC 	20
# BRO_TYPE_FILE   	21
# BRO_TYPE_VECTOR   22
# BRO_TYPE_ERROR   	23
# BRO_TYPE_PACKET   24 /* CAUTION -- not defined in Bro! */
# BRO_TYPE_SET   	25 /* CAUTION -- not defined in Bro! */
# BRO_TYPE_MAX   	26


# ----------------------------------------------------------------------------#
# ----------------------------- Bro Spot Config ------------------------------#
# ----------------------------------------------------------------------------#
[default]
bro_type = 5
q = 1e-4
n_init = 2000
level = 0.99
up = true
down = false
bounded = true
max_excess = 200

[active_tcp_conns]
bro_type = 3

[pkts_link]
bro_type = 3

[pkts_dropped]
bro_type = 3


# ----------------------------------------------------------------------------#
# ---------------------- Bro Stats script Measurements -----------------------#
# ----------------------------------------------------------------------------#
## Timestamp for the measurement.
; ts:            time      &log;
## Peer that generated this log.  Mostly for clusters.
; peer:          string    &log;
## Amount of memory currently in use in MB.
; mem:           count     &log;
## Number of packets processed since the last stats interval.
; pkts_proc:     count     &log;
## Number of bytes received since the last stats interval if
## reading live traffic.
; bytes_recv:    count     &log;

## Number of packets dropped since the last stats interval if
## reading live traffic.
; pkts_dropped:  count     &log &optional;
## Number of packets seen on the link since the last stats
## interval if reading live traffic.
; pkts_link:     count     &log &optional;
## Lag between the wall clock and packet timestamps if reading
## live traffic.
; pkt_lag:       interval  &log &optional;

## Number of events processed since the last stats interval.
; events_proc:   count     &log;
## Number of events that have been queued since the last stats
## interval.
; events_queued: count     &log;

## TCP connections currently in memory.
; active_tcp_conns: count  &log;
## UDP connections currently in memory.
; active_udp_conns: count &log;
## ICMP connections currently in memory.
; active_icmp_conns: count &log;

## TCP connections seen since last stats interval.
; tcp_conns:        count  &log;
## UDP connections seen since last stats interval.
; udp_conns:        count &log;
## ICMP connections seen since last stats interval.
; icmp_conns:        count &log;

## Number of timers scheduled since last stats interval.
; timers: count &log;
## Current number of scheduled timers.
; active_timers: count &log;

## Number of files seen since last stats interval.
; files: count &log;
## Current number of files actively being seen.
; active_files: count &log;

## Number of DNS requests seen since last stats interval.
; dns_requests: count &log;
## Current number of DNS requests awaiting a reply.
; active_dns_requests: count &log;

## Current size of TCP data in reassembly.
; reassem_tcp_size: count &log;
## Current size of File data in reassembly.
; reassem_file_size: count &log;
## Current size of packet fragment data in reassembly.
; reassem_frag_size: count &log;
## Current size of unknown data in reassembly (this is only PIA buffer right now).
; reassem_unknown_size: count &log;